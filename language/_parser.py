#!/usr/bin/env python3

# WARNING: CAVEAT UTILITOR
#
#  This file was automatically generated by TatSu.
#
#     https://pypi.python.org/pypi/tatsu/
#
#  Any changes you make to it will be overwritten the next time
#  the file is generated.

# ruff: noqa: C405, COM812, I001, F401, PLR1702, PLC2801, SIM117

import sys
from pathlib import Path

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu
from tatsu.parsing import leftrec, nomemo, isname
from tatsu.infos import ParserConfig
from tatsu.util import re, generic_main


KEYWORDS: set[str] = set()


class CalcBuffer(Buffer):
    def __init__(self, text, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)

        super().__init__(text, config=config)


class CalcParser(Parser):
    def __init__(self, /, config: ParserConfig | None = None, **settings):
        config = ParserConfig.new(
            config,
            owner=self,
            whitespace=None,
            nameguard=None,
            ignorecase=False,
            namechars='',
            parseinfo=False,
            comments_re=None,
            eol_comments_re=None,
            keywords=KEYWORDS,
            start='start',
        )
        config = config.replace(**settings)

        super().__init__(config=config)

    @tatsumasu()
    def _start_(self):
        self._expression_()
        self._check_eof()

    @tatsumasu()
    def _expression_(self):
        with self._choice():
            with self._option():
                self._term_()
                self._token('+')
                self._cut()
                self._expression_()
            with self._option():
                self._term_()
                self._token('-')
                self._cut()
                self._expression_()
            with self._option():
                self._term_()
            self._error(
                'expecting one of: '
                '<factor> <term>'
            )

    @tatsumasu()
    def _term_(self):
        with self._choice():
            with self._option():
                self._factor_()
                self._token('*')
                self._cut()
                self._term_()
            with self._option():
                self._factor_()
                self._token('/')
                self._cut()
                self._term_()
            with self._option():
                self._factor_()
            self._error(
                'expecting one of: '
                "'(' <factor> <number>"
            )

    @tatsumasu()
    def _factor_(self):
        with self._choice():
            with self._option():
                self._token('(')
                self._cut()
                self._expression_()
                self.name_last_node('@')
                self._token(')')
            with self._option():
                self._number_()
            self._error(
                'expecting one of: '
                "'(' <number> \\d+"
            )

    @tatsumasu()
    def _number_(self):
        self._pattern('\\d+')


def main(filename, **kwargs):
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        text = Path(filename).read_text()
    parser = CalcParser()
    return parser.parse(
        text,
        filename=filename,
        **kwargs,
    )